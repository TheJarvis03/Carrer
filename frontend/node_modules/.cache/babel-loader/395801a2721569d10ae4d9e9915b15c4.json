{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/admissionScores';\nexport const admissionScoreService = {\n  getScores: async filters => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: filters\n      });\n      const {\n        success,\n        data,\n        pagination\n      } = response.data;\n      if (success && Array.isArray(data)) {\n        return {\n          success: true,\n          data: data.map(score => ({\n            _id: score._id,\n            major_name: score.major_name,\n            major_code: score.major_code,\n            school_name: score.school_name,\n            school_code: score.school_code,\n            subject_group: score.subject_group,\n            score: score.score,\n            note: score.note\n          })),\n          pagination: pagination || {\n            currentPage: 1,\n            totalPages: 1,\n            totalItems: 0,\n            itemsPerPage: 10\n          }\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid data format',\n        data: [],\n        pagination: {\n          currentPage: 1,\n          totalPages: 1,\n          totalItems: 0,\n          itemsPerPage: 10\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching scores:', error);\n      return {\n        success: false,\n        error: error.message,\n        data: [],\n        pagination: {\n          currentPage: 1,\n          totalPages: 1,\n          totalItems: 0,\n          itemsPerPage: 10\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","admissionScoreService","getScores","filters","response","get","params","success","data","pagination","Array","isArray","map","score","_id","major_name","major_code","school_name","school_code","subject_group","note","currentPage","totalPages","totalItems","itemsPerPage","error","console","message"],"sources":["F:/career-project/frontend/src/services/admissionScoreService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/admissionScores';\n\nexport const admissionScoreService = {\n    getScores: async (filters) => {\n        try {\n            const response = await axios.get(API_URL, { params: filters });\n            const { success, data, pagination } = response.data;\n\n            if (success && Array.isArray(data)) {\n                return {\n                    success: true,\n                    data: data.map((score) => ({\n                        _id: score._id,\n                        major_name: score.major_name,\n                        major_code: score.major_code,\n                        school_name: score.school_name,\n                        school_code: score.school_code,\n                        subject_group: score.subject_group,\n                        score: score.score,\n                        note: score.note,\n                    })),\n                    pagination: pagination || {\n                        currentPage: 1,\n                        totalPages: 1,\n                        totalItems: 0,\n                        itemsPerPage: 10,\n                    },\n                };\n            }\n\n            return {\n                success: false,\n                error: 'Invalid data format',\n                data: [],\n                pagination: {\n                    currentPage: 1,\n                    totalPages: 1,\n                    totalItems: 0,\n                    itemsPerPage: 10,\n                },\n            };\n        } catch (error) {\n            console.error('Error fetching scores:', error);\n            return {\n                success: false,\n                error: error.message,\n                data: [],\n                pagination: {\n                    currentPage: 1,\n                    totalPages: 1,\n                    totalItems: 0,\n                    itemsPerPage: 10,\n                },\n            };\n        }\n    },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2CAA2C;AAE3D,OAAO,MAAMC,qBAAqB,GAAG;EACjCC,SAAS,EAAE,MAAOC,OAAO,IAAK;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,EAAE;QAAEM,MAAM,EAAEH;MAAQ,CAAC,CAAC;MAC9D,MAAM;QAAEI,OAAO;QAAEC,IAAI;QAAEC;MAAW,CAAC,GAAGL,QAAQ,CAACI,IAAI;MAEnD,IAAID,OAAO,IAAIG,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QAChC,OAAO;UACHD,OAAO,EAAE,IAAI;UACbC,IAAI,EAAEA,IAAI,CAACI,GAAG,CAAEC,KAAK,KAAM;YACvBC,GAAG,EAAED,KAAK,CAACC,GAAG;YACdC,UAAU,EAAEF,KAAK,CAACE,UAAU;YAC5BC,UAAU,EAAEH,KAAK,CAACG,UAAU;YAC5BC,WAAW,EAAEJ,KAAK,CAACI,WAAW;YAC9BC,WAAW,EAAEL,KAAK,CAACK,WAAW;YAC9BC,aAAa,EAAEN,KAAK,CAACM,aAAa;YAClCN,KAAK,EAAEA,KAAK,CAACA,KAAK;YAClBO,IAAI,EAAEP,KAAK,CAACO;UAChB,CAAC,CAAC,CAAC;UACHX,UAAU,EAAEA,UAAU,IAAI;YACtBY,WAAW,EAAE,CAAC;YACdC,UAAU,EAAE,CAAC;YACbC,UAAU,EAAE,CAAC;YACbC,YAAY,EAAE;UAClB;QACJ,CAAC;MACL;MAEA,OAAO;QACHjB,OAAO,EAAE,KAAK;QACdkB,KAAK,EAAE,qBAAqB;QAC5BjB,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACRY,WAAW,EAAE,CAAC;UACdC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE,CAAC;UACbC,YAAY,EAAE;QAClB;MACJ,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACHlB,OAAO,EAAE,KAAK;QACdkB,KAAK,EAAEA,KAAK,CAACE,OAAO;QACpBnB,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACRY,WAAW,EAAE,CAAC;UACdC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE,CAAC;UACbC,YAAY,EAAE;QAClB;MACJ,CAAC;IACL;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}