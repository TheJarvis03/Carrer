{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst MAX_RETRIES = 3;\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const admissionScoreService = {\n  getAll: async (filters = {}, retryCount = 0) => {\n    try {\n      const response = await axios.get(`${API_URL}/admission-scores`, {\n        params: filters,\n        timeout: 5000 // 5 seconds timeout\n      });\n      return response.data;\n    } catch (error) {\n      if (error.code === 'ECONNREFUSED' && retryCount < MAX_RETRIES) {\n        console.log(`Connection failed, retrying... (${retryCount + 1}/${MAX_RETRIES})`);\n        await wait(1000 * (retryCount + 1)); // Exponential backoff\n        return admissionScoreService.getAll(filters, retryCount + 1);\n      }\n      console.error('Error fetching scores:', error.message);\n      throw new Error('Could not connect to server. Please check if the backend is running.');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","MAX_RETRIES","wait","ms","Promise","resolve","setTimeout","admissionScoreService","getAll","filters","retryCount","response","get","params","timeout","data","error","code","console","log","message","Error"],"sources":["F:/career-project/frontend/src/services/admissionScoreService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\nconst MAX_RETRIES = 3;\r\n\r\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const admissionScoreService = {\r\n    getAll: async (filters = {}, retryCount = 0) => {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/admission-scores`, {\r\n                params: filters,\r\n                timeout: 5000, // 5 seconds timeout\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.code === 'ECONNREFUSED' && retryCount < MAX_RETRIES) {\r\n                console.log(`Connection failed, retrying... (${retryCount + 1}/${MAX_RETRIES})`);\r\n                await wait(1000 * (retryCount + 1)); // Exponential backoff\r\n                return admissionScoreService.getAll(filters, retryCount + 1);\r\n            }\r\n            console.error('Error fetching scores:', error.message);\r\n            throw new Error('Could not connect to server. Please check if the backend is running.');\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,WAAW,GAAG,CAAC;AAErB,MAAMC,IAAI,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAEpE,OAAO,MAAMI,qBAAqB,GAAG;EACjCC,MAAM,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,EAAEC,UAAU,GAAG,CAAC,KAAK;IAC5C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,mBAAmB,EAAE;QAC5Da,MAAM,EAAEJ,OAAO;QACfK,OAAO,EAAE,IAAI,CAAE;MACnB,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACI,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,IAAIP,UAAU,GAAGT,WAAW,EAAE;QAC3DiB,OAAO,CAACC,GAAG,CAAC,mCAAmCT,UAAU,GAAG,CAAC,IAAIT,WAAW,GAAG,CAAC;QAChF,MAAMC,IAAI,CAAC,IAAI,IAAIQ,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,OAAOH,qBAAqB,CAACC,MAAM,CAACC,OAAO,EAAEC,UAAU,GAAG,CAAC,CAAC;MAChE;MACAQ,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACI,OAAO,CAAC;MACtD,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC;IAC3F;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}