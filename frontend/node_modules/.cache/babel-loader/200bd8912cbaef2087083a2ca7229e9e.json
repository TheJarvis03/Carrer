{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/school/detail';\nconst schoolDetailService = {\n  getSchoolByCode: async code => {\n    try {\n      const response = await axios.get(`${API_URL}/${code}`);\n      const {\n        success,\n        data\n      } = response.data;\n      if (success && data) {\n        return {\n          success: true,\n          data: {\n            id: data.school_id,\n            code: data.school_code,\n            // Thêm mã trường\n            school_name: data.school_name,\n            school_img: data.school_img,\n            introduction: data.introduction,\n            tuition: data.tuition,\n            method_link: data.method_link,\n            majors: data.majors || []\n          }\n        };\n      }\n      return {\n        success: false,\n        error: 'Không tìm thấy thông tin trường'\n      };\n    } catch (error) {\n      console.error('Error fetching school details:', error);\n      return {\n        success: false,\n        error: 'Có lỗi xảy ra khi tải thông tin trường'\n      };\n    }\n  },\n  getSchoolMajors: async schoolId => {\n    try {\n      const response = await axios.get(`${API_URL}/${schoolId}/majors`);\n      const {\n        success,\n        data\n      } = response.data;\n      if (success && Array.isArray(data)) {\n        return {\n          success: true,\n          data\n        };\n      }\n      return {\n        success: false,\n        error: 'Không tìm thấy danh sách ngành'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  getSchoolAdmissionScores: async schoolId => {\n    try {\n      const response = await axios.get(`${API_URL}/${schoolId}/scores`);\n      const {\n        success,\n        data\n      } = response.data;\n      if (success && Array.isArray(data)) {\n        return {\n          success: true,\n          data\n        };\n      }\n      return {\n        success: false,\n        error: 'Không tìm thấy điểm chuẩn'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  getMajorsBySchool: async code => {\n    try {\n      var _response$data, _response$data$data;\n      const response = await axios.get(`${API_URL}/${code}`);\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && (_response$data$data = response.data.data) !== null && _response$data$data !== void 0 && _response$data$data.majors) {\n        const majors = response.data.data.majors;\n\n        // Group by major info\n        const groupedMajors = majors.reduce((acc, major) => {\n          const key = `${major.index}-${major.major_code}-${major.major_name}-${major.quota}`;\n          if (!acc[key]) {\n            acc[key] = {\n              index: major.index,\n              major_code: major.major_code,\n              major_name: major.major_name,\n              quota: major.quota,\n              combinations: []\n            };\n          }\n\n          // Group subject combinations\n          const subjectKey = major.subject || '';\n          const existingCombination = acc[key].combinations.find(c => c.subject === subjectKey);\n          if (!existingCombination) {\n            acc[key].combinations.push({\n              admission_methods: major.admission_methods,\n              subject: subjectKey\n            });\n          }\n          return acc;\n        }, {});\n        return {\n          success: true,\n          data: Object.values(groupedMajors)\n        };\n      }\n      return {\n        success: false,\n        data: [],\n        error: 'Không tìm thấy thông tin ngành'\n      };\n    } catch (error) {\n      console.error('Error fetching majors:', error);\n      return {\n        success: false,\n        data: [],\n        error: 'Lỗi khi tải dữ liệu ngành học'\n      };\n    }\n  },\n  getSchoolScores: async code => {\n    try {\n      var _response$data2;\n      const response = await axios.get(`http://localhost:5000/api/admissionScores/school/${code}`);\n      if (response !== null && response !== void 0 && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.success) {\n        const scores = response.data.data;\n\n        // Group scores by year\n        const groupedScores = scores.reduce((acc, score) => {\n          const year = score.year || new Date().getFullYear();\n          if (!acc[year]) {\n            acc[year] = [];\n          }\n          acc[year].push({\n            majorCode: score.major_code || '',\n            majorName: score.major_name || '',\n            subjectGroup: score.subject_group || '',\n            // Sử dụng trực tiếp subject_group\n            score: score.score || 0,\n            note: score.note || ''\n          });\n          return acc;\n        }, {});\n\n        // Sort scores within each year by majorCode\n        Object.keys(groupedScores).forEach(year => {\n          groupedScores[year].sort((a, b) => a.majorCode.localeCompare(b.majorCode));\n        });\n        return {\n          success: true,\n          data: groupedScores\n        };\n      }\n      return {\n        success: false,\n        data: {},\n        error: 'Không tìm thấy điểm chuẩn'\n      };\n    } catch (error) {\n      console.error('Error fetching scores:', error);\n      return {\n        success: false,\n        data: {},\n        error: 'Lỗi khi tải điểm chuẩn'\n      };\n    }\n  }\n};\nexport default schoolDetailService;","map":{"version":3,"names":["axios","API_URL","schoolDetailService","getSchoolByCode","code","response","get","success","data","id","school_id","school_code","school_name","school_img","introduction","tuition","method_link","majors","error","console","getSchoolMajors","schoolId","Array","isArray","message","getSchoolAdmissionScores","getMajorsBySchool","_response$data","_response$data$data","groupedMajors","reduce","acc","major","key","index","major_code","major_name","quota","combinations","subjectKey","subject","existingCombination","find","c","push","admission_methods","Object","values","getSchoolScores","_response$data2","scores","groupedScores","score","year","Date","getFullYear","majorCode","majorName","subjectGroup","subject_group","note","keys","forEach","sort","a","b","localeCompare"],"sources":["F:/career-project/frontend/src/services/schoolDetailService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/school/detail';\n\nconst schoolDetailService = {\n    getSchoolByCode: async (code) => {\n        try {\n            const response = await axios.get(`${API_URL}/${code}`);\n            const { success, data } = response.data;\n\n            if (success && data) {\n                return {\n                    success: true,\n                    data: {\n                        id: data.school_id,\n                        code: data.school_code, // Thêm mã trường\n                        school_name: data.school_name,\n                        school_img: data.school_img,\n                        introduction: data.introduction,\n                        tuition: data.tuition,\n                        method_link: data.method_link,\n                        majors: data.majors || [],\n                    },\n                };\n            }\n            return { success: false, error: 'Không tìm thấy thông tin trường' };\n        } catch (error) {\n            console.error('Error fetching school details:', error);\n            return {\n                success: false,\n                error: 'Có lỗi xảy ra khi tải thông tin trường',\n            };\n        }\n    },\n\n    getSchoolMajors: async (schoolId) => {\n        try {\n            const response = await axios.get(`${API_URL}/${schoolId}/majors`);\n            const { success, data } = response.data;\n\n            if (success && Array.isArray(data)) {\n                return { success: true, data };\n            }\n            return { success: false, error: 'Không tìm thấy danh sách ngành' };\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    },\n\n    getSchoolAdmissionScores: async (schoolId) => {\n        try {\n            const response = await axios.get(`${API_URL}/${schoolId}/scores`);\n            const { success, data } = response.data;\n\n            if (success && Array.isArray(data)) {\n                return { success: true, data };\n            }\n            return { success: false, error: 'Không tìm thấy điểm chuẩn' };\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    },\n\n    getMajorsBySchool: async (code) => {\n        try {\n            const response = await axios.get(`${API_URL}/${code}`);\n            if (response?.data?.success && response.data.data?.majors) {\n                const majors = response.data.data.majors;\n\n                // Group by major info\n                const groupedMajors = majors.reduce((acc, major) => {\n                    const key = `${major.index}-${major.major_code}-${major.major_name}-${major.quota}`;\n\n                    if (!acc[key]) {\n                        acc[key] = {\n                            index: major.index,\n                            major_code: major.major_code,\n                            major_name: major.major_name,\n                            quota: major.quota,\n                            combinations: [],\n                        };\n                    }\n\n                    // Group subject combinations\n                    const subjectKey = major.subject || '';\n                    const existingCombination = acc[key].combinations.find(\n                        (c) => c.subject === subjectKey,\n                    );\n\n                    if (!existingCombination) {\n                        acc[key].combinations.push({\n                            admission_methods: major.admission_methods,\n                            subject: subjectKey,\n                        });\n                    }\n\n                    return acc;\n                }, {});\n\n                return {\n                    success: true,\n                    data: Object.values(groupedMajors),\n                };\n            }\n            return {\n                success: false,\n                data: [],\n                error: 'Không tìm thấy thông tin ngành',\n            };\n        } catch (error) {\n            console.error('Error fetching majors:', error);\n            return {\n                success: false,\n                data: [],\n                error: 'Lỗi khi tải dữ liệu ngành học',\n            };\n        }\n    },\n\n    getSchoolScores: async (code) => {\n        try {\n            const response = await axios.get(\n                `http://localhost:5000/api/admissionScores/school/${code}`,\n            );\n\n            if (response?.data?.success) {\n                const scores = response.data.data;\n\n                // Group scores by year\n                const groupedScores = scores.reduce((acc, score) => {\n                    const year = score.year || new Date().getFullYear();\n\n                    if (!acc[year]) {\n                        acc[year] = [];\n                    }\n\n                    acc[year].push({\n                        majorCode: score.major_code || '',\n                        majorName: score.major_name || '',\n                        subjectGroup: score.subject_group || '', // Sử dụng trực tiếp subject_group\n                        score: score.score || 0,\n                        note: score.note || '',\n                    });\n\n                    return acc;\n                }, {});\n\n                // Sort scores within each year by majorCode\n                Object.keys(groupedScores).forEach((year) => {\n                    groupedScores[year].sort((a, b) =>\n                        a.majorCode.localeCompare(b.majorCode),\n                    );\n                });\n\n                return {\n                    success: true,\n                    data: groupedScores,\n                };\n            }\n            return {\n                success: false,\n                data: {},\n                error: 'Không tìm thấy điểm chuẩn',\n            };\n        } catch (error) {\n            console.error('Error fetching scores:', error);\n            return {\n                success: false,\n                data: {},\n                error: 'Lỗi khi tải điểm chuẩn',\n            };\n        }\n    },\n};\n\nexport default schoolDetailService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}