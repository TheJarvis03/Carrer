{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/admissionScores';\nexport const admissionScoreService = {\n  getScores: async filters => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: filters\n      });\n      const {\n        success,\n        data,\n        pagination\n      } = response.data;\n      if (success && Array.isArray(data)) {\n        return {\n          success: true,\n          data: data.map(score => ({\n            ...score,\n            universityName: score.university_name || score.universityName,\n            universityCode: score.university_code || score.universityCode,\n            majorName: score.major_name || score.majorName,\n            examGroup: score.exam_group || score.examGroup\n          })),\n          pagination: pagination || {\n            currentPage: 1,\n            totalPages: 1,\n            totalItems: 0,\n            itemsPerPage: 10\n          }\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid data format',\n        data: [],\n        pagination: {\n          currentPage: 1,\n          totalPages: 1,\n          totalItems: 0,\n          itemsPerPage: 10\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching scores:', error);\n      return {\n        success: false,\n        error: error.message,\n        data: [],\n        pagination: {\n          currentPage: 1,\n          totalPages: 1,\n          totalItems: 0,\n          itemsPerPage: 10\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","admissionScoreService","getScores","filters","response","get","params","success","data","pagination","Array","isArray","map","score","universityName","university_name","universityCode","university_code","majorName","major_name","examGroup","exam_group","currentPage","totalPages","totalItems","itemsPerPage","error","console","message"],"sources":["F:/career-project/frontend/src/services/admissionScoreService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/admissionScores';\r\n\r\nexport const admissionScoreService = {\r\n    getScores: async (filters) => {\r\n        try {\r\n            const response = await axios.get(API_URL, { params: filters });\r\n            const { success, data, pagination } = response.data;\r\n\r\n            if (success && Array.isArray(data)) {\r\n                return {\r\n                    success: true,\r\n                    data: data.map(score => ({\r\n                        ...score,\r\n                        universityName: score.university_name || score.universityName,\r\n                        universityCode: score.university_code || score.universityCode,\r\n                        majorName: score.major_name || score.majorName,\r\n                        examGroup: score.exam_group || score.examGroup\r\n                    })),\r\n                    pagination: pagination || {\r\n                        currentPage: 1,\r\n                        totalPages: 1,\r\n                        totalItems: 0,\r\n                        itemsPerPage: 10\r\n                    }\r\n                };\r\n            }\r\n\r\n            return { \r\n                success: false, \r\n                error: 'Invalid data format',\r\n                data: [],\r\n                pagination: {\r\n                    currentPage: 1,\r\n                    totalPages: 1,\r\n                    totalItems: 0,\r\n                    itemsPerPage: 10\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error('Error fetching scores:', error);\r\n            return { \r\n                success: false, \r\n                error: error.message,\r\n                data: [],\r\n                pagination: {\r\n                    currentPage: 1,\r\n                    totalPages: 1,\r\n                    totalItems: 0,\r\n                    itemsPerPage: 10\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2CAA2C;AAE3D,OAAO,MAAMC,qBAAqB,GAAG;EACjCC,SAAS,EAAE,MAAOC,OAAO,IAAK;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,EAAE;QAAEM,MAAM,EAAEH;MAAQ,CAAC,CAAC;MAC9D,MAAM;QAAEI,OAAO;QAAEC,IAAI;QAAEC;MAAW,CAAC,GAAGL,QAAQ,CAACI,IAAI;MAEnD,IAAID,OAAO,IAAIG,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QAChC,OAAO;UACHD,OAAO,EAAE,IAAI;UACbC,IAAI,EAAEA,IAAI,CAACI,GAAG,CAACC,KAAK,KAAK;YACrB,GAAGA,KAAK;YACRC,cAAc,EAAED,KAAK,CAACE,eAAe,IAAIF,KAAK,CAACC,cAAc;YAC7DE,cAAc,EAAEH,KAAK,CAACI,eAAe,IAAIJ,KAAK,CAACG,cAAc;YAC7DE,SAAS,EAAEL,KAAK,CAACM,UAAU,IAAIN,KAAK,CAACK,SAAS;YAC9CE,SAAS,EAAEP,KAAK,CAACQ,UAAU,IAAIR,KAAK,CAACO;UACzC,CAAC,CAAC,CAAC;UACHX,UAAU,EAAEA,UAAU,IAAI;YACtBa,WAAW,EAAE,CAAC;YACdC,UAAU,EAAE,CAAC;YACbC,UAAU,EAAE,CAAC;YACbC,YAAY,EAAE;UAClB;QACJ,CAAC;MACL;MAEA,OAAO;QACHlB,OAAO,EAAE,KAAK;QACdmB,KAAK,EAAE,qBAAqB;QAC5BlB,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACRa,WAAW,EAAE,CAAC;UACdC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE,CAAC;UACbC,YAAY,EAAE;QAClB;MACJ,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACHnB,OAAO,EAAE,KAAK;QACdmB,KAAK,EAAEA,KAAK,CAACE,OAAO;QACpBpB,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACRa,WAAW,EAAE,CAAC;UACdC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE,CAAC;UACbC,YAAY,EAAE;QAClB;MACJ,CAAC;IACL;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}