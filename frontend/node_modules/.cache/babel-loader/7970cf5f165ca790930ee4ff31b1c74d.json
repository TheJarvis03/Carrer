{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/major/detail';\nexport const majorDetailService = {\n  getMajorDetailByCode: async code => {\n    try {\n      const response = await axios.get(`${API_URL}/${code}`);\n      // Log toàn bộ response để debug\n      console.log('Major detail API response:', response);\n\n      // Nếu API trả về { success, data }\n      if (response.data && response.data.success && response.data.data) {\n        const d = response.data.data;\n        return {\n          success: true,\n          data: {\n            id: d.major_id,\n            major_code: d.major_code,\n            major_name: d.major_name,\n            description: d.description,\n            job_opportunities: d.job_opportunities,\n            salary_range: d.salary_range,\n            exam_groups: d.exam_groups\n          }\n        };\n      }\n\n      // Nếu API trả về trực tiếp object ngành\n      if (response.data && response.data.major_code) {\n        return {\n          success: true,\n          data: {\n            id: response.data.major_id,\n            major_code: response.data.major_code,\n            major_name: response.data.major_name,\n            description: response.data.description,\n            job_opportunities: response.data.job_opportunities,\n            salary_range: response.data.salary_range,\n            exam_groups: response.data.exam_groups\n          }\n        };\n      }\n      return {\n        success: false,\n        error: 'Không tìm thấy thông tin ngành'\n      };\n    } catch (error) {\n      console.error('Error fetching major details:', error);\n      return {\n        success: false,\n        error: 'Có lỗi xảy ra khi tải thông tin ngành'\n      };\n    }\n  },\n  getMajorStatistics: async code => {\n    try {\n      const response = await axios.get(`${API_URL}/${code}/statistics`);\n      return response.data;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  getMajorSchools: async code => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/school/detail/major/${code}`);\n      if (!response.data || !response.data.success || !Array.isArray(response.data.data)) {\n        return {\n          success: false,\n          error: 'Không tìm thấy trường đào tạo ngành này'\n        };\n      }\n\n      // Gộp các trường trùng tên/mã trường\n      const schoolMap = {};\n      response.data.data.forEach(item => {\n        const key = `${item.school_code}_${item.school_name}`;\n        if (!schoolMap[key]) {\n          schoolMap[key] = {\n            school_name: item.school_name,\n            school_code: item.school_code,\n            admission_methods: [],\n            subject: []\n          };\n        }\n        // Đảm bảo luôn là mảng\n        const methods = Array.isArray(item.admission_methods) ? item.admission_methods : item.admission_methods ? [item.admission_methods] : [];\n        const subjects = Array.isArray(item.subject) ? item.subject : item.subject ? [item.subject] : [];\n        methods.forEach(method => {\n          if (!schoolMap[key].admission_methods.includes(method)) {\n            schoolMap[key].admission_methods.push(method);\n          }\n        });\n        subjects.forEach(sub => {\n          if (!schoolMap[key].subject.includes(sub)) {\n            schoolMap[key].subject.push(sub);\n          }\n        });\n      });\n      const result = Object.values(schoolMap);\n      return {\n        success: true,\n        data: result\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","majorDetailService","getMajorDetailByCode","code","response","get","console","log","data","success","d","id","major_id","major_code","major_name","description","job_opportunities","salary_range","exam_groups","error","getMajorStatistics","message","getMajorSchools","Array","isArray","schoolMap","forEach","item","key","school_code","school_name","admission_methods","subject","methods","subjects","method","includes","push","sub","result","Object","values"],"sources":["F:/career-project/frontend/src/services/majorDetailService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/major/detail';\n\nexport const majorDetailService = {\n    getMajorDetailByCode: async (code) => {\n        try {\n            const response = await axios.get(`${API_URL}/${code}`);\n            // Log toàn bộ response để debug\n            console.log('Major detail API response:', response);\n\n            // Nếu API trả về { success, data }\n            if (response.data && response.data.success && response.data.data) {\n                const d = response.data.data;\n                return {\n                    success: true,\n                    data: {\n                        id: d.major_id,\n                        major_code: d.major_code,\n                        major_name: d.major_name,\n                        description: d.description,\n                        job_opportunities: d.job_opportunities,\n                        salary_range: d.salary_range,\n                        exam_groups: d.exam_groups,\n                    }\n                };\n            }\n\n            // Nếu API trả về trực tiếp object ngành\n            if (response.data && response.data.major_code) {\n                return {\n                    success: true,\n                    data: {\n                        id: response.data.major_id,\n                        major_code: response.data.major_code,\n                        major_name: response.data.major_name,\n                        description: response.data.description,\n                        job_opportunities: response.data.job_opportunities,\n                        salary_range: response.data.salary_range,\n                        exam_groups: response.data.exam_groups,\n                    }\n                };\n            }\n\n            return { success: false, error: 'Không tìm thấy thông tin ngành' };\n        } catch (error) {\n            console.error('Error fetching major details:', error);\n            return {\n                success: false,\n                error: 'Có lỗi xảy ra khi tải thông tin ngành',\n            };\n        }\n    },\n\n    getMajorStatistics: async (code) => {\n        try {\n            const response = await axios.get(`${API_URL}/${code}/statistics`);\n            return response.data;\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    },\n\n    getMajorSchools: async (code) => {\n        try {\n            const response = await axios.get(`http://localhost:5000/api/school/detail/major/${code}`);\n            if (!response.data || !response.data.success || !Array.isArray(response.data.data)) {\n                return { success: false, error: 'Không tìm thấy trường đào tạo ngành này' };\n            }\n\n            // Gộp các trường trùng tên/mã trường\n            const schoolMap = {};\n            response.data.data.forEach(item => {\n                const key = `${item.school_code}_${item.school_name}`;\n                if (!schoolMap[key]) {\n                    schoolMap[key] = {\n                        school_name: item.school_name,\n                        school_code: item.school_code,\n                        admission_methods: [],\n                        subject: []\n                    };\n                }\n                // Đảm bảo luôn là mảng\n                const methods = Array.isArray(item.admission_methods)\n                    ? item.admission_methods\n                    : (item.admission_methods ? [item.admission_methods] : []);\n                const subjects = Array.isArray(item.subject)\n                    ? item.subject\n                    : (item.subject ? [item.subject] : []);\n\n                methods.forEach(method => {\n                    if (!schoolMap[key].admission_methods.includes(method)) {\n                        schoolMap[key].admission_methods.push(method);\n                    }\n                });\n                subjects.forEach(sub => {\n                    if (!schoolMap[key].subject.includes(sub)) {\n                        schoolMap[key].subject.push(sub);\n                    }\n                });\n            });\n\n            const result = Object.values(schoolMap);\n\n            return {\n                success: true,\n                data: result\n            };\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,wCAAwC;AAExD,OAAO,MAAMC,kBAAkB,GAAG;EAC9BC,oBAAoB,EAAE,MAAOC,IAAI,IAAK;IAClC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,IAAIG,IAAI,EAAE,CAAC;MACtD;MACAG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,QAAQ,CAAC;;MAEnD;MACA,IAAIA,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACI,IAAI,CAACC,OAAO,IAAIL,QAAQ,CAACI,IAAI,CAACA,IAAI,EAAE;QAC9D,MAAME,CAAC,GAAGN,QAAQ,CAACI,IAAI,CAACA,IAAI;QAC5B,OAAO;UACHC,OAAO,EAAE,IAAI;UACbD,IAAI,EAAE;YACFG,EAAE,EAAED,CAAC,CAACE,QAAQ;YACdC,UAAU,EAAEH,CAAC,CAACG,UAAU;YACxBC,UAAU,EAAEJ,CAAC,CAACI,UAAU;YACxBC,WAAW,EAAEL,CAAC,CAACK,WAAW;YAC1BC,iBAAiB,EAAEN,CAAC,CAACM,iBAAiB;YACtCC,YAAY,EAAEP,CAAC,CAACO,YAAY;YAC5BC,WAAW,EAAER,CAAC,CAACQ;UACnB;QACJ,CAAC;MACL;;MAEA;MACA,IAAId,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACI,IAAI,CAACK,UAAU,EAAE;QAC3C,OAAO;UACHJ,OAAO,EAAE,IAAI;UACbD,IAAI,EAAE;YACFG,EAAE,EAAEP,QAAQ,CAACI,IAAI,CAACI,QAAQ;YAC1BC,UAAU,EAAET,QAAQ,CAACI,IAAI,CAACK,UAAU;YACpCC,UAAU,EAAEV,QAAQ,CAACI,IAAI,CAACM,UAAU;YACpCC,WAAW,EAAEX,QAAQ,CAACI,IAAI,CAACO,WAAW;YACtCC,iBAAiB,EAAEZ,QAAQ,CAACI,IAAI,CAACQ,iBAAiB;YAClDC,YAAY,EAAEb,QAAQ,CAACI,IAAI,CAACS,YAAY;YACxCC,WAAW,EAAEd,QAAQ,CAACI,IAAI,CAACU;UAC/B;QACJ,CAAC;MACL;MAEA,OAAO;QAAET,OAAO,EAAE,KAAK;QAAEU,KAAK,EAAE;MAAiC,CAAC;IACtE,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZb,OAAO,CAACa,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QACHV,OAAO,EAAE,KAAK;QACdU,KAAK,EAAE;MACX,CAAC;IACL;EACJ,CAAC;EAEDC,kBAAkB,EAAE,MAAOjB,IAAI,IAAK;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,IAAIG,IAAI,aAAa,CAAC;MACjE,OAAOC,QAAQ,CAACI,IAAI;IACxB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZ,OAAO;QAAEV,OAAO,EAAE,KAAK;QAAEU,KAAK,EAAEA,KAAK,CAACE;MAAQ,CAAC;IACnD;EACJ,CAAC;EAEDC,eAAe,EAAE,MAAOnB,IAAI,IAAK;IAC7B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,iDAAiDF,IAAI,EAAE,CAAC;MACzF,IAAI,CAACC,QAAQ,CAACI,IAAI,IAAI,CAACJ,QAAQ,CAACI,IAAI,CAACC,OAAO,IAAI,CAACc,KAAK,CAACC,OAAO,CAACpB,QAAQ,CAACI,IAAI,CAACA,IAAI,CAAC,EAAE;QAChF,OAAO;UAAEC,OAAO,EAAE,KAAK;UAAEU,KAAK,EAAE;QAA0C,CAAC;MAC/E;;MAEA;MACA,MAAMM,SAAS,GAAG,CAAC,CAAC;MACpBrB,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACkB,OAAO,CAACC,IAAI,IAAI;QAC/B,MAAMC,GAAG,GAAG,GAAGD,IAAI,CAACE,WAAW,IAAIF,IAAI,CAACG,WAAW,EAAE;QACrD,IAAI,CAACL,SAAS,CAACG,GAAG,CAAC,EAAE;UACjBH,SAAS,CAACG,GAAG,CAAC,GAAG;YACbE,WAAW,EAAEH,IAAI,CAACG,WAAW;YAC7BD,WAAW,EAAEF,IAAI,CAACE,WAAW;YAC7BE,iBAAiB,EAAE,EAAE;YACrBC,OAAO,EAAE;UACb,CAAC;QACL;QACA;QACA,MAAMC,OAAO,GAAGV,KAAK,CAACC,OAAO,CAACG,IAAI,CAACI,iBAAiB,CAAC,GAC/CJ,IAAI,CAACI,iBAAiB,GACrBJ,IAAI,CAACI,iBAAiB,GAAG,CAACJ,IAAI,CAACI,iBAAiB,CAAC,GAAG,EAAG;QAC9D,MAAMG,QAAQ,GAAGX,KAAK,CAACC,OAAO,CAACG,IAAI,CAACK,OAAO,CAAC,GACtCL,IAAI,CAACK,OAAO,GACXL,IAAI,CAACK,OAAO,GAAG,CAACL,IAAI,CAACK,OAAO,CAAC,GAAG,EAAG;QAE1CC,OAAO,CAACP,OAAO,CAACS,MAAM,IAAI;UACtB,IAAI,CAACV,SAAS,CAACG,GAAG,CAAC,CAACG,iBAAiB,CAACK,QAAQ,CAACD,MAAM,CAAC,EAAE;YACpDV,SAAS,CAACG,GAAG,CAAC,CAACG,iBAAiB,CAACM,IAAI,CAACF,MAAM,CAAC;UACjD;QACJ,CAAC,CAAC;QACFD,QAAQ,CAACR,OAAO,CAACY,GAAG,IAAI;UACpB,IAAI,CAACb,SAAS,CAACG,GAAG,CAAC,CAACI,OAAO,CAACI,QAAQ,CAACE,GAAG,CAAC,EAAE;YACvCb,SAAS,CAACG,GAAG,CAAC,CAACI,OAAO,CAACK,IAAI,CAACC,GAAG,CAAC;UACpC;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAChB,SAAS,CAAC;MAEvC,OAAO;QACHhB,OAAO,EAAE,IAAI;QACbD,IAAI,EAAE+B;MACV,CAAC;IACL,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZ,OAAO;QAAEV,OAAO,EAAE,KAAK;QAAEU,KAAK,EAAEA,KAAK,CAACE;MAAQ,CAAC;IACnD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}