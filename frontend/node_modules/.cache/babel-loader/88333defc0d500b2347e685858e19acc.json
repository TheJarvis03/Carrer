{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/users'; // Fix API URL\n\n// Remove duplicate interceptors and keep only one set\naxios.interceptors.request.use(config => {\n  // Add request logging\n  console.log('Request:', config.url, config.data);\n\n  // Add auth token if exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request Error:', error);\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  console.log('Response:', response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async (username, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/login`, {\n        username,\n        password\n      });\n      if (response.data) {\n        return {\n          success: true,\n          data: response.data\n        };\n      }\n      return {\n        success: false,\n        message: 'Invalid response format'\n      };\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data;\n      console.error('Login error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Đăng nhập thất bại'\n      };\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/register`, userData);\n      if (response.data.success) {\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: response.data.error || 'Đăng ký thất bại'\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Đăng ký thất bại. Vui lòng thử lại sau.'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n  },\n  getProfile: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/profile`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Không thể tải thông tin người dùng'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","interceptors","request","use","config","console","log","url","data","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","message","authService","login","username","password","post","success","_error$response2","_error$response3","_error$response3$data","register","userData","_error$response4","_error$response4$data","logout","removeItem","getProfile","get","_error$response5","_error$response5$data"],"sources":["F:/career-project/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/users'; // Fix API URL\n\n// Remove duplicate interceptors and keep only one set\naxios.interceptors.request.use(\n    (config) => {\n        // Add request logging\n        console.log('Request:', config.url, config.data);\n\n        // Add auth token if exists\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        console.error('Request Error:', error);\n        return Promise.reject(error);\n    },\n);\n\naxios.interceptors.response.use(\n    (response) => {\n        console.log('Response:', response.data);\n        return response;\n    },\n    (error) => {\n        console.error('Response Error:', error.response?.data || error.message);\n        return Promise.reject(error);\n    },\n);\n\nexport const authService = {\n    login: async (username, password) => {\n        try {\n            const response = await axios.post(`${API_URL}/login`, {\n                username,\n                password,\n            });\n\n            if (response.data) {\n                return {\n                    success: true,\n                    data: response.data,\n                };\n            }\n\n            return {\n                success: false,\n                message: 'Invalid response format',\n            };\n        } catch (error) {\n            console.error('Login error details:', error.response?.data);\n            return {\n                success: false,\n                message: error.response?.data?.message || 'Đăng nhập thất bại',\n            };\n        }\n    },\n\n    register: async (userData) => {\n        try {\n            const response = await axios.post(`${API_URL}/register`, userData);\n            if (response.data.success) {\n                return { success: true };\n            }\n            return {\n                success: false,\n                error: response.data.error || 'Đăng ký thất bại',\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error:\n                    error.response?.data?.error ||\n                    'Đăng ký thất bại. Vui lòng thử lại sau.',\n            };\n        }\n    },\n\n    logout: () => {\n        localStorage.removeItem('token');\n    },\n\n    getProfile: async () => {\n        try {\n            const response = await axios.get(`${API_URL}/profile`);\n            return {\n                success: true,\n                data: response.data,\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error:\n                    error.response?.data?.error ||\n                    'Không thể tải thông tin người dùng',\n            };\n        }\n    },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC,CAAC,CAAC;;AAEnD;AACAD,KAAK,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACR;EACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,MAAM,CAACG,GAAG,EAAEH,MAAM,CAACI,IAAI,CAAC;;EAEhD;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPL,MAAM,CAACQ,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOL,MAAM;AACjB,CAAC,EACAU,KAAK,IAAK;EACPT,OAAO,CAACS,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAEDf,KAAK,CAACE,YAAY,CAACgB,QAAQ,CAACd,GAAG,CAC1Bc,QAAQ,IAAK;EACVZ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEW,QAAQ,CAACT,IAAI,CAAC;EACvC,OAAOS,QAAQ;AACnB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACPb,OAAO,CAACS,KAAK,CAAC,iBAAiB,EAAE,EAAAI,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBV,IAAI,KAAIM,KAAK,CAACK,OAAO,CAAC;EACvE,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG;EACvBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACjC,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,IAAI,CAAC,GAAGxB,OAAO,QAAQ,EAAE;QAClDsB,QAAQ;QACRC;MACJ,CAAC,CAAC;MAEF,IAAIN,QAAQ,CAACT,IAAI,EAAE;QACf,OAAO;UACHiB,OAAO,EAAE,IAAI;UACbjB,IAAI,EAAES,QAAQ,CAACT;QACnB,CAAC;MACL;MAEA,OAAO;QACHiB,OAAO,EAAE,KAAK;QACdN,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC,OAAOL,KAAK,EAAE;MAAA,IAAAY,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZvB,OAAO,CAACS,KAAK,CAAC,sBAAsB,GAAAY,gBAAA,GAAEZ,KAAK,CAACG,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBlB,IAAI,CAAC;MAC3D,OAAO;QACHiB,OAAO,EAAE,KAAK;QACdN,OAAO,EAAE,EAAAQ,gBAAA,GAAAb,KAAK,CAACG,QAAQ,cAAAU,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnB,IAAI,cAAAoB,qBAAA,uBAApBA,qBAAA,CAAsBT,OAAO,KAAI;MAC9C,CAAC;IACL;EACJ,CAAC;EAEDU,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC1B,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMlB,KAAK,CAACyB,IAAI,CAAC,GAAGxB,OAAO,WAAW,EAAE8B,QAAQ,CAAC;MAClE,IAAIb,QAAQ,CAACT,IAAI,CAACiB,OAAO,EAAE;QACvB,OAAO;UAAEA,OAAO,EAAE;QAAK,CAAC;MAC5B;MACA,OAAO;QACHA,OAAO,EAAE,KAAK;QACdX,KAAK,EAAEG,QAAQ,CAACT,IAAI,CAACM,KAAK,IAAI;MAClC,CAAC;IACL,CAAC,CAAC,OAAOA,KAAK,EAAE;MAAA,IAAAiB,gBAAA,EAAAC,qBAAA;MACZ,OAAO;QACHP,OAAO,EAAE,KAAK;QACdX,KAAK,EACD,EAAAiB,gBAAA,GAAAjB,KAAK,CAACG,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBvB,IAAI,cAAAwB,qBAAA,uBAApBA,qBAAA,CAAsBlB,KAAK,KAC3B;MACR,CAAC;IACL;EACJ,CAAC;EAEDmB,MAAM,EAAEA,CAAA,KAAM;IACVvB,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;EACpC,CAAC;EAEDC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMlB,KAAK,CAACqC,GAAG,CAAC,GAAGpC,OAAO,UAAU,CAAC;MACtD,OAAO;QACHyB,OAAO,EAAE,IAAI;QACbjB,IAAI,EAAES,QAAQ,CAACT;MACnB,CAAC;IACL,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAuB,gBAAA,EAAAC,qBAAA;MACZ,OAAO;QACHb,OAAO,EAAE,KAAK;QACdX,KAAK,EACD,EAAAuB,gBAAA,GAAAvB,KAAK,CAACG,QAAQ,cAAAoB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7B,IAAI,cAAA8B,qBAAA,uBAApBA,qBAAA,CAAsBxB,KAAK,KAC3B;MACR,CAAC;IACL;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}